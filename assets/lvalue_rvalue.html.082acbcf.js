import{_ as p,r as t,o,c,a as n,b as s,d as e,F as l,e as r}from"./app.2859fef2.js";const u={},i=r(`<h1 id="\u53F3\u503C\u5F15\u7528" tabindex="-1"><a class="header-anchor" href="#\u53F3\u503C\u5F15\u7528" aria-hidden="true">#</a> \u53F3\u503C\u5F15\u7528</h1><h2 id="\u5DE6\u503C\u548C\u53F3\u503C" tabindex="-1"><a class="header-anchor" href="#\u5DE6\u503C\u548C\u53F3\u503C" aria-hidden="true">#</a> \u5DE6\u503C\u548C\u53F3\u503C</h2><p><strong>\u5DE6\u503C(lvalue, left value)</strong>\uFF0C\u5C31\u662F\u8D4B\u503C\u7B26\u53F7\u5DE6\u8FB9\u7684\u503C\uFF0C\u8868\u8FBE\u5F0F\u7ED3\u675F\u540E\u4ECD\u7136\u5B58\u5728\u7684\u5BF9\u8C61\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">// x \u662F\u4E00\u4E2A\u5DE6\u503C</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>\u53F3\u503C(rvalue, right value)</strong>\uFF0C\u53F3\u8FB9\u7684\u503C\uFF0C\u662F\u6307\u8868\u8FBE\u5F0F\u7ED3\u675F\u540E\u5C31\u4E0D\u518D\u5B58\u5728\u7684\u4E34\u65F6\u5BF9\u8C61\u3002\u540C\u65F6\u53F3\u503C\u53C8\u6709 <strong>\u7EAF\u53F3\u503C(pure rvalue)</strong> \u548C <strong>\u5C06\u4EA1\u503C(eXpiring Value)</strong> \u7684\u5206\u7C7B\u3002</p><ul><li>\u7EAF\u53F3\u503C\uFF0C\u6307\u7684\u662F\u4E34\u65F6\u53D8\u91CF\u6216\u5B57\u9762\u91CF\u503C</li></ul><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">// 3 \u662F\u4E00\u4E2A\u7EAF\u53F3\u503C</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> vec <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> vec<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> nums <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>\u51FD\u6570 <code>func()</code> \u5185\u7684 <code>vec</code> \u662F\u4E00\u4E2A\u4E34\u65F6\u53D8\u91CF\uFF0C\u5728\u51FD\u6570\u7ED3\u675F\u540E\uFF0C <code>vec</code> \u4F1A\u88AB\u62F7\u8D1D\u4E00\u4EFD\u8FD4\u56DE\uFF0C\u7136\u540E\u7ACB\u5373\u9500\u6BC1\uFF0C\u8FD9\u5C31\u4F1A\u9020\u6210\u989D\u5916\u7684\u5F00\u9500</p><p>C++11 \u4E4B\u540E\uFF0C\u7F16\u8BD1\u5668\u5BF9\u6B64\u8FDB\u884C\u4E86\u4F18\u5316\uFF0C\u4F1A\u5C06 vec \u8FDB\u884C\u9690\u5F0F\u53F3\u503C\u8F6C\u5316\uFF0C\u8FD9\u91CC\u5C31\u6D89\u53CA\u79FB\u52A8\u8BED\u4E49</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> vec <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment">// address:0x16f84b228</span>
    <span class="token keyword">return</span> vec<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> nums<span class="token punctuation">;</span>  <span class="token comment">// address:0x16f84b200</span>
nums <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// address:0x16f84b228</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="\u5DE6\u503C\u5F15\u7528" tabindex="-1"><a class="header-anchor" href="#\u5DE6\u503C\u5F15\u7528" aria-hidden="true">#</a> \u5DE6\u503C\u5F15\u7528</h2><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">&amp;</span> lrval <span class="token operator">=</span> val<span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>\u5B9A\u4E49\u5DE6\u503C\u5F15\u7528\u7684\u65F6\u5019\u9700\u8981\u76F4\u63A5\u521D\u59CB\u5316\uFF0C\u5426\u5219\u4F1A\u62A5\u9519 <code>error: declaration of reference variable &#39;lrval&#39; requires an initializer</code></p><h2 id="\u53F3\u503C\u5F15\u7528-1" tabindex="-1"><a class="header-anchor" href="#\u53F3\u503C\u5F15\u7528-1" aria-hidden="true">#</a> \u53F3\u503C\u5F15\u7528</h2><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span> rrval <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>\u5B9A\u4E49\u53F3\u503C\u5F15\u7528\u7684\u65F6\u5019\u9700\u8981\u76F4\u63A5\u521D\u59CB\u5316\uFF0C\u5426\u5219\u4F1A\u62A5\u9519 <code>error: declaration of reference variable &#39;lrval&#39; requires an initializer</code></p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">PrintRefType</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>ref<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;lvalue:&quot;</span> <span class="token operator">&lt;&lt;</span>ref<span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">PrintRefType</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span>ref<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;rvalue:&quot;</span> <span class="token operator">&lt;&lt;</span>ref<span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> val1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">PrintRefType</span><span class="token punctuation">(</span>val1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: lvalue:1</span>
    <span class="token function">PrintRefType</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// output: rvalue:2</span>

    <span class="token keyword">int</span><span class="token operator">&amp;&amp;</span> val2 <span class="token operator">=</span> val1<span class="token punctuation">;</span>  <span class="token comment">// error: rvalue reference to type &#39;int&#39; cannot bind to lvalue of type &#39;int&#39;</span>

    <span class="token keyword">int</span><span class="token operator">&amp;&amp;</span> val3 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>val1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PrintRefType</span><span class="token punctuation">(</span>val3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: lvalue:1</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ul><li><code>val1</code> \u662F\u4E00\u4E2A\u5DE6\u503C</li><li><code>2</code> \u662F\u4E00\u4E2A\u53F3\u503C</li><li><code>int&amp;&amp; val2 = val1;</code> \u53F3\u503C\u5F15\u7528\u4E0D\u80FD\u5F15\u7528\u5DE6\u503C\uFF0C\u62A5\u9519 <code>error: rvalue reference to type &#39;int&#39; cannot bind to lvalue of type &#39;int&#39;</code></li><li><code>int&amp;&amp; val3 = std::move(val1);</code> \u53EF\u4EE5\u4F7F\u7528 <code>std::move</code> \u5C06\u5DE6\u503C\u8F6C\u5316\u4E3A\u53F3\u503C</li></ul><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> reference</h2>`,20),k={href:"https://eli.thegreenplace.net/2011/12/15/understanding-lvalues-and-rvalues-in-c-and-c/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://changkun.de/modern-cpp/en-us/03-runtime/#3-3-rvalue-Reference",target:"_blank",rel:"noopener noreferrer"};function b(m,v){const a=t("ExternalLinkIcon");return o(),c(l,null,[i,n("ul",null,[n("li",null,[s("[1] "),n("a",k,[s("Understanding lvalues and rvalues in C and C++"),e(a)])]),n("li",null,[s("[2] "),n("a",d,[s("MODERN C++ TUTORIAL: C++ 11/14/17/20 ON THE FLY(SECOND EDITION) Changkun Ou"),e(a)])])])],64)}var g=p(u,[["render",b],["__file","lvalue_rvalue.html.vue"]]);export{g as default};
