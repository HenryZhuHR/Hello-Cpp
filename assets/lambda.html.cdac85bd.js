import{_ as a,r as p,o as e,c as t,a as n,b as o,d as c,F as l,e as u}from"./app.2859fef2.js";const r={},i=u(`<h1 id="lambda-\u8868\u8FBE\u5F0F" tabindex="-1"><a class="header-anchor" href="#lambda-\u8868\u8FBE\u5F0F" aria-hidden="true">#</a> Lambda \u8868\u8FBE\u5F0F</h1><h2 id="\u57FA\u672C\u8BED\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u57FA\u672C\u8BED\u6CD5" aria-hidden="true">#</a> \u57FA\u672C\u8BED\u6CD5</h2><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token punctuation">[</span>\u6355\u83B7\u5217\u8868<span class="token punctuation">]</span><span class="token punctuation">(</span>\u51FD\u6570\u53C2\u6570\u5217\u8868<span class="token punctuation">)</span> <span class="token keyword">mutable</span><span class="token punctuation">(</span>\u53EF\u9009<span class="token punctuation">)</span> \u5F02\u5E38\u5C5E\u6027 <span class="token operator">-&gt;</span> \u8FD4\u56DE\u7C7B\u578B <span class="token punctuation">{</span>
    <span class="token comment">// \u51FD\u6570\u4F53</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Lambda \u5728\u6CA1\u6709\u6355\u83B7\u53D8\u91CF\u7684\u65F6\u5019\uFF0C\u53EF\u4EE5\u7406\u89E3\u4E3A\u4E00\u4E2A\u666E\u901A\u51FD\u6570\u6307\u9488\uFF0C\u4F8B\u5982\u51FD\u6570</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u53EF\u4EE5\u7528 Lambda \u8868\u8FBE\u5F0F\u8868\u8FBE\u4E3A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">int</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 5</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Lambda \u8868\u8FBE\u5F0F\u7684\u8FD4\u56DE\u53C2\u6570\u7C7B\u578B\u4F1A\u81EA\u52A8\u63A8\u5BFC\uFF0C\u56E0\u6B64\u8FD4\u56DE\u7C7B\u578B\u53EF\u4EE5\u7701\u7565\uFF1B\u540C\u65F6\uFF0C(\u4E60\u60EF\u4E0A) \u7528 <code>auto</code> \u6765\u7B80\u5316\u4EE3\u7801</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">auto</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><hr><p>Lambda \u8868\u8FBE\u5F0F\u662F\u4E00\u79CD\u8BED\u6CD5\u7CD6\uFF0C\u53EF\u4EE5\u5C06\u4EE3\u7801\u8FDB\u884C\u7B80\u5316\uFF0C\u4F8B\u5982\u4E00\u4E2A\u51FD\u6570</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">Increase3</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">Increase3</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 5</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">auto</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 4</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u5F53\u6355\u83B7\u5217\u8868\u4E0D\u4E3A <code>[]</code> \u4E3A\u7A7A\u7684\u65F6\u5019\uFF0C\u6709\u51E0\u79CD\u6355\u83B7\u65B9\u5F0F</p><h2 id="\u6355\u83B7" tabindex="-1"><a class="header-anchor" href="#\u6355\u83B7" aria-hidden="true">#</a> \u6355\u83B7</h2><h3 id="\u503C\u6355\u83B7" tabindex="-1"><a class="header-anchor" href="#\u503C\u6355\u83B7" aria-hidden="true">#</a> \u503C\u6355\u83B7</h3><p>\u6355\u83B7\u5217\u8868\u7684\u53D8\u91CF\uFF08\u9700\u8981\u53EF\u4EE5\u62F7\u8D1D\uFF09\u5728 Lambda \u8868\u8FBE\u5F0F\u521B\u5EFA\u65F6\u62F7\u8D1D\uFF0C\u800C\u4E0D\u662F\u5728\u8C03\u7528\u7684\u65F6\u5019\u62F7\u8D1D</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span>  val <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> f   <span class="token operator">=</span> <span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> val<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3</span>
val <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
val<span class="token punctuation">;</span>    <span class="token comment">// 10</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u5F53\u91CD\u65B0\u8D4B\u503C <code>val=10;</code> \u4E4B\u540E\uFF0C Lambda \u8868\u8FBE\u5F0F\u5185\u7684 <code>val</code> \u4ECD\u7136 <code>3</code></p><p>\u6253\u5370\u5404\u81EA\u7684\u5730\u5740</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>lambda address<span class="token operator">:</span> <span class="token number">0x16d36b228</span>
local  address<span class="token operator">:</span> <span class="token number">0x16d36b22c</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>\u8FD9\u8BF4\u660E\uFF0C\u5728 Lambda \u8868\u8FBE\u5F0F\u521B\u5EFA\u7684\u65F6\u5019\uFF0C\u6355\u83B7\u5217\u8868\u53C2\u6570 <code>val</code> \u7684\u503C\u5C31\u88AB\u62F7\u8D1D\u4E86\u4E00\u4EFD\uFF0C\u8FD9\u548C\u51FD\u6570\u5728\u6309\u503C\u4F20\u9012\u53C2\u6570\u65F6\u7684\u7684\u5C40\u90E8\u53D8\u91CF\u662F\u4E00\u6837\u7684</p><h3 id="\u5F15\u7528\u6355\u83B7" tabindex="-1"><a class="header-anchor" href="#\u5F15\u7528\u6355\u83B7" aria-hidden="true">#</a> \u5F15\u7528\u6355\u83B7</h3><p>\u5728\u6355\u83B7\u5217\u8868\u7684\u53D8\u91CF\u524D\u52A0\u4E0A <code>&amp;</code> \u65F6\uFF0C\u4F20\u9012\u7684\u662F\u53D8\u91CF\u5F15\u7528</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span>  val <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> f   <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>val<span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> val<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3</span>
val <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
val<span class="token punctuation">;</span>    <span class="token comment">// 10</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 10</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u6253\u5370\u5404\u81EA\u7684\u5730\u5740</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>lambda address<span class="token operator">:</span> <span class="token number">0x16da6722c</span>
local  address<span class="token operator">:</span> <span class="token number">0x16da6722c</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="\u9690\u5F0F\u6355\u83B7" tabindex="-1"><a class="header-anchor" href="#\u9690\u5F0F\u6355\u83B7" aria-hidden="true">#</a> \u9690\u5F0F\u6355\u83B7</h3><p>\u524D\u9762\u7684\u4E24\u79CD\u65B9\u5F0F\u9700\u8981\u624B\u52A8\u6307\u5B9A\u6355\u83B7\u53C2\u6570\uFF0C\u5982\u679C\u5E0C\u671B\u53EF\u4EE5\u6355\u6349\u5230\u5C40\u90E8\u8303\u56F4\u5185\u53D8\u91CF\uFF0C\u53EF\u4EE5\u7528 <code>=</code> or <code>&amp;</code> \u6765\u7B80\u5316</p><ul><li><code>[]</code> \u7A7A\u6355\u83B7\u5217\u8868</li><li><code>[param1, &amp;param, ...]</code> \u6307\u5B9A\u53C2\u6570\u6355\u83B7</li><li><code>[=]</code> \u503C\u6355\u83B7</li><li><code>[&amp;]</code> \u5F15\u7528\u6355\u83B7</li><li>\u7EC4\u5408 <ul><li><code>[=, &amp;a, &amp;b]</code> \u8868\u793A\u5916\u90E8\u53D8\u91CF\u4EC5 <code>a</code> <code>b</code> \u53EF\u4EE5\u4FEE\u6539</li><li><code>[&amp;, a, b]</code> \u8868\u793A\u5916\u90E8\u53D8\u91CF\u9664\u4E86 <code>a</code> <code>b</code> \u53EF\u4EE5\u4FEE\u6539\uFF0C\u5176\u4F59\u4E0D\u53EF\u4EE5\u4FEE\u6539</li><li>\u4E0D\u53EF\u4EE5\u6DF7\u5408\u4F7F\u7528\uFF0C\u4F8B\u5982 <code>[=, &amp;a, b]</code></li></ul></li></ul><p>\u7A7A\u6355\u83B7\u5217\u8868</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">auto</span> f   <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>\u6307\u5B9A\u53C2\u6570\u6355\u83B7</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span>  a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> f <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">]</span> <span class="token punctuation">{</span> a<span class="token operator">++</span><span class="token punctuation">;</span> b<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// a = 1, b =3</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u503C\u6355\u83B7</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span>  val <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> f   <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> val<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// val = 2</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u5F15\u7528\u6355\u83B7</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span>  val <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> f   <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> val<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// val = 3</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u7EC4\u5408</p><p>\u4EC5\u53D8\u91CF <code>a</code> <code>b</code> \u53EF\u4EE5\u4FEE\u6539\uFF1B\u53D8\u91CF <code>c</code> \u4E0D\u53EF\u4EE5\u4FEE\u6539\uFF0C\u4F46\u662F\u53EF\u4EE5\u8BBF\u95EE</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span>  a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">]</span>
<span class="token punctuation">{</span>
    a<span class="token operator">++</span><span class="token punctuation">;</span>
    b <span class="token operator">+=</span> c<span class="token punctuation">;</span>
    <span class="token comment">// c++; // error: value c can&#39;t be changed</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a=4 b=9</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="\u7528\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u7528\u6CD5" aria-hidden="true">#</a> \u7528\u6CD5</h2><h3 id="\u4E0E-for-each-\u4E00\u8D77\u4F7F\u7528" tabindex="-1"><a class="header-anchor" href="#\u4E0E-for-each-\u4E00\u8D77\u4F7F\u7528" aria-hidden="true">#</a> \u4E0E for_each \u4E00\u8D77\u4F7F\u7528</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// arr = [2, 3, 4, 5, 6]</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,46),k={href:"https://docs.microsoft.com/en-us/cpp/cpp/lambda-expressions-in-cpp?view=msvc-170",target:"_blank",rel:"noopener noreferrer"};function d(b,m){const s=p("ExternalLinkIcon");return e(),t(l,null,[i,n("ul",null,[n("li",null,[n("a",k,[o("Microsoft "),c(s)])])])],64)}var g=a(r,[["render",d],["__file","lambda.html.vue"]]);export{g as default};
